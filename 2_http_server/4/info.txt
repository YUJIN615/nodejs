쿠키와 세션 이해하기

쿠키의 필요성
- 요청에는 한 가지 단점이 있음
- 누가 요청을 보냈는지 모름 (IP 주소와 브라우저 정보 정보만 암)
- 로그인을 구현하면 됨
- 쿠키와 세션이 필요
- 쿠키: 키=값의 쌍
- name=yujin
- 매 요청마다 서버에 동봉해서 보냄
- 서버는 쿠키를 읽어서 누구인지 파악

쿠키 서버 만들기
- 쿠키 넣는 것을 직접 구현
- writeHead: 요청 헤더에 입력하는 메서드
- 헤더에 Set-Cookie 를 서버에서 브라우저로 보내줄 수 있음
- 그 다음 요청부터는 브라우저에 있는 쿠키를 전달해줌
- 그러면 req.headers.cookie 로 읽어올 수 있음
- Set-Cookie: 브라우저에게 쿠키를 설정하라고 명령
- 브라우저를 켜고 있는 순간까지 유지됨

헤더와 본문
- http 요청과 응답은 헤더와 본문을 가짐
- 헤더는 요청 또는 응답에 대한 정보를 가짐
- 본문은 주고받는 실제 데이터
- 쿠키는 부가적인 정보이므로 헤더에 저장

쿠키 옵션
- Set-Cookie 시 다양한 옵션이 있음
- 쿠키명=쿠키값: 기본적인 쿠키의 값이다. mycookie=test 또는 name=yujin 같이 설정한다.
- Expires=날짜: 만료 기한이다. 이 기한이 지나면 쿠키가 제거된다. 기본값은 클라이언트가 종료될 때까지이다.
- Max-age=초: Expires와 비슷하지만 날짜 대신 초를 입력할 수 있다. 해당 초가 지나면 쿠키가 제거된다. Expires 보다 우선한다.
- Domain=도메인명: 쿠키가 전송될 도메인을 특정할 수 있다.
- Path=URL: 쿠카가 전송될 URL을 특정할 수 있다. 기본값은 '/'이고 이 경우 모든 URL에서 쿠키를 전송할 수 있다.
- Secure: HTTPS일 경우에만 쿠키가 전송된다.
- HTTPOnly: 설정 시 자바스크립트에서 쿠키에 접근할 수 없다. 쿠키 조작을 방지하기 위해 설정하는 것이 좋다.

세션 사용하기
- 쿠키의 정보는 노출되고 수정되는 위험이 있음
- 쿠키는 애플리케이션 탭에서 조작이 가능하다.
- 직접적인 정보는 넣지 않고 암호화한 정보를 넣는다.
- 중요한 정보는 서버에서 관리하고 클라이언트는 세션 키만 제공(중요한 정보에 접근할 수 있는 키)
- 서버 세션 객체(session) 생성 후, uniqueInt(키)를 만들어 속성명으로 사용
- 속성 값에 정보 저장하고 uniqueInt를 클라이언트에 보냄
- 실 서버에서는 세션을 직접 구현하지 말고 express-session 사용하기
