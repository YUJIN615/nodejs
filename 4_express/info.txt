Express 소개
- http 모듈로 웹 서버를 만들 때 코드가 보기 좋지 않고, 확장성도 떠러짐
- 프레임워크로 해결
- 대표적인 것이 Express(익스프레스), Koa(코아), Hapi(하피)
- 코드 관리도 용이하고 편의성이 많이 높아짐

nodemon
- 개발할 때 nodemon 서버를 주로 사용함
- 소스를 바꿨을 때 자동으로 서버를 재시작해줌
- nodemon이 html 파일이 바뀌는 것을 감시하지는 않는다. html 불러올 때 거기에서 인식함

미들웨어 사용하기
- express에서 가장 중요
- express를 사용하면 http 메서드별로 코드를 실행할 수 있어서 깔끔해지지만 공통으로 실행해야 하는 코드의 중복이 발생한다.
- 이 때 use의 콜백 미들웨어를 사용한다. (use가 미들웨어가 아니라 use에 미들웨어를 장착한 것)
- 콜백 함수의 세번째 인자인 next를 받아와서 실행해야 다음 라우터 중에 일치하는 곳을 실행한다.
- 미들웨어는 next를 해줘야만 다음으로 넘어간다.

작성 순서
- app 생성 > app 관련 설정 > 공통 미들웨어 > 라우터 > 에러처리 미들웨어

에러처리
- 네 개의 매개변수를 반드시 음모두 사용해야 한다. (err, req, res, next)
- 에러코드를 보고 해커들이 집중적으로 공격하는 경우가 있기 때문에 400, 500번대 에러는 조심해서 사용해야 한다.
- 에러 코드를 404로 통일시키기도 함

기타
- res.json({}) 형식으로 응답을 보냈을 때 함수가 끝나는 것이 아님. return 해줘야 함
- express의 res.json은 node의 res.writeHead(200, {'Content-Type': 'application/json'})과 res.end(JSON(stringify({})) 를 합친 것이다.
- res.render()도 res.sendFile과 비슷하다
- next('route')를 하면 이어서 실행되는 부분은 뛰어넘고 다음 라우터로 넘어간다. 분기처리 해서 사용할 수 있다. 중복을 줄일 때 유용하다.


미들웨어
morgan
- 클라이언트에서 어떤 응답이 왔는지 알려준다.
- app.use(morgan('dev')) 와 같이 쓴다.
- dev 대신 combined 쓰면 더 자세히 알려줌

cookie-parser
- 쿠키를 파싱해준다,
- app.use(cookieParser('cookiePassword')); 와 같이 값을 넣으면 암호화된다.

express-session
- session 객체가 생긴다.
- 사용자에 대한 고유한 세션. 개인의 저장공간

미들웨어 정의 순서
- 미들웨어간의 순서가 중요하다.
- 거의 모든 미들웨어는 내부적으로 next()가 실행된다.
- 하지만 static 미들웨어는 실행되면 다음이 실행되지 않는다. next() 역할이 없음.
- 요청 주소에 따라서 어디까지 실행되는지 달라질 수 있음
- 만약 cookie-parser, session 후에 static을 실행한다면 로그인 한 이후에만 static을 실행하겠다는 의미

미들웨어 간 데이터 전달
- 데이터를 전달해야 하는 경우 let 으로 전역변수를 지정하는 것은 매우 위험하다.
- 전역변수는 외부에서 접근할 수 있기 때문이다.
- app.set() 으로 해도 매우 위험하다.
- 해당 요청 한번만 데이터를 받아오고 싶으면 req.data 로 받아올 수 있다.
- 요청이 끝났을 때 데이터가 사라져서 안전하다.
- 계속 유지되고 싶은 데이터는 req.session에 보관
