버퍼와 스트림

버퍼
- 일정한 크기로 모아두는 데이터
- 일정한 크기가 되면 한 번에 처리
- 버퍼링: 버퍼에 데이터가 찰 때까지 모으는 작업
- 버퍼의 형식은 16진
- fs.readfile 메서드로 파일 내용을 한번에 읽어오는 방식이 버퍼 방식이다.
- 서버에 데이터 크기 만큼의 메모리가 남아있어야 한다.

스트림
- 데이터의 흐름
- 일정한 크기로 나눠서 여러 번에 걸쳐서 처리
- 버퍼(또는 청크)의 크기를 작게 만들어서 주기적으로 데이터를 전달
- 스트리밍: 일정한 크기의 데이터를 지속적으로 전달하는 작업
- 서버의 메모리를 적게 차지하면서 효율적으로 데이터를 보낼 수 있다.
- 요청 응답도 보통 스트림 방식 적용되어 있음
- 스트림 방식으로 불러오면 데이터를 합쳐줘야 한다.
- 스트림 방식도 비동기이기 때문에 에러처리를 해줘야 한다.
- 데이터를 잘라서 보내기 때문에 서버에 메모리가 조금만 남아있어도 데이터를 불러올 수 있다.
- 대용량 데이터를 처리하려면 스트림 방식이 필수이다.


기타 fs 메서드

파일 및 폴더 생성
- fs.acess(경로, 옵션, 콜백): 폴더나 파일에 접근할 수 있는지 체크
- fs.mkdir(경로, 콜백): 폴더 만드는 메서드
- fs.open(경로, 옵션, 콜백): 파일의 아이디를 가져오는 메서드. 파일이 없다면 파일을 생성한 후 아이디를 가져옴.
- fs.write(): 파일을 읽거나 쓸 수 있음.
- fs.rename(기존 경로, 새 경로, 콜백): 파일 이름 바꾸기

폴더 내용 확인 및 삭제
- fs.readdir(경로, 콜백): 폴더 안의 내용물을 확인할 수 있음. 배열 안에 내부 파일과 폴더명 나옴
- fs.unlink(경로, 콜백): 파일을 지울 수 있음. 파일이 없으면 에러가 발생. 파일 있는지 먼저 확인 필요
- fs.rmdir(경로, 콜백): 폴더를 지울 수 있음. 폴더 안에 파일이 있으면 에러 발생. 내부 파일 모두 지우고 호출해야 함.
- fs.existsSync: 파일, 폴더 존재하는지 확인
- fs.stat(경로): 파일 정보 확인

파일 복사
- fs.copyFile(경로, 파일명)
- createReadStrea, createWriteStream 사용하면 중간에 압축하는 과정을 추가할 수 있음

파일 감시
- fs.watch('경로', 콜백): 파일이 수정되면 콜백함수가 호출된다.
