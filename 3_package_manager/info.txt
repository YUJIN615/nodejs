npm이란
- Node Package Manager
- 노드의 패키지 매니저
- 다른 사람들이 만든 소스코드들을 모아둔 저장소
- 남의 코드를 사용하여 프로그래밍 가능
- 이미 있는 기능을 다시 구현할 필요가 없어 효율적
- 오픈 소스 생태계를 구성중

- 패키지: npm에 업로드된 노드 모듈
- 모듈이 다른 모듈을 사용할 수 있듯 패키지도 다른 패키지를 사용할 수 있음
- 의존 관계라고 부름

package.json
- 현재 프로젝트에 대한 정보와 사용 중인 패키지에 대한 정보를 담은 파일
- 같은 패키지라도 버전별로 기능이 다를 수 있으므로 버전을 기록해두어야 함
- 동일한 버전을 설치하지 않으면 문제가 생길 수 있음
- 노드 프로젝트 시작 전 package.json 부터 만들고 시작함 (npm init)

package-lock.json
- 정확한 버전들이 표시됨
- 의존성 패키지까지 모두 버전이 표시됨
- 버전 문제가 없는 한 수정하지 않음

개발용 패키지
- 설치할 때 -D 를 붙이면 개발할 때만 쓰이는 패키지가 설치된다. (devDependencies)

글로벌(전역) 패키지
- 설치할 때 -g 를 붙이면 package.json에 추가되지 않고 명령어로 쓸 수 있다. (global)
- -g 명령어로 설치하면 프로젝트에서 사용하는지 알 수 없다. 그래서 -D 로 설치하고 명령어로 사용하기 위해 npx를 앞에 붙여서 사용한다. -g 설치는 피하는 것이 좋다.
- ex) npm i -D rimraf 로 설치 후에 명령어로 사용할 때는 npx rimraf node_modules

node_modules
- npm install 시 node_modules 폴더 생성
- 내부에 설치한 패키지들이 들어있음
- 의존 관계가 있는 패키지들이 모두 설치됨
- 용량이 커서 배포할 때는 삭제하고 배포하고 서버에서 다시 npm i 로 설치한다.
- 폐쇄망인 경우에는 npm i 가 안되는 경우가 있어서 폴더를 다 올리기도 한다.
- package-lock.json도 생성되어 패키지 간 의존 관계를 명확하게 표시함

SemVer 버저닝
- 노드 패키지의 버전은 SemVer(유의적 버저닝) 방식을 따름
- Major(주 버전), Minor(부 버전), Patch(수 버전)
- 노드에서는 배포를 할 때 항상 버전을 올려야 함
- Major는 하위 버전과 호환되지 않은 수정 사항이 생겼을 때 올림(전체적으로 UI나 기능상 큰 변경이 일어날 때)
- Minor는 하위 버전과 호환되는 수정 사항이 생겼을 때 올림(기능 추가와 조금씩 업데이트 할 때)
- Patch는 기능에 버그를 해결했을 때 올림

버전 기호 사용하기
- 버전 앞에 기호를 붙여 의미를 더함
- ^ 표시는 첫번째 자리까지 고정시키겠다는 의미
- ~ 표시는 두번째 자리까지 고정시키겠다는 의미(첫번째 자리만 맞으면 기능상 문제 없어서 잘 안씀)
- SemVer 규칙을 잘 안따르는 패키지도 있으니 테스트 해서 써야 함
- >=, <=, >, <
- @latest는 최신을 의미. ex) npm i express@latest
- @next로 가장 최신 배포판 사용 가능(불안정함)
- 알파/베타/RC 버전이 존재할 수도 있음(1.1.1-alpha, 2.0.0-beta, 2.0.0-cr.0)

기타 명령어
- npm outdated: 어떤 패키지에 기능 변화가 생겼는지 알 수 있음
- npm unistall 패키지명: 패키지 삭제(npm rm 패키지명으로도 가능)
- npm search 검색어: npm 패키지를 검색할 수 있음(npmjs.com)에서도 가능
- npm info 패키지명: 패키지의 세부 정보 파악 가능
- npm adduser: npm에 로그인을 하기 위한 명령어(npmjs.com에서 회원가입)
- npm whoami: 현재 사용자가 누구인지 알려줌
- npm logout: 로그인한 계정을 로그아웃
- npm version 버전: package.json의 버전을 올림. ex) npm version major, npm version minor > 깃 커밋까지 같이 해줌
- npm deprecate [패키지명][버전] [메세지]: 패키지를 설치할 때 경고 메세지를 띄우게 함(오류가 있는 패키지에 적용)
- npm publish: 자신이 만든 패키지를 배포
- npm unpublish --force: 자신이 만든 패키지를 배포 중단(배로 후 72시간 내에만 가능) 다른 사람이 내 패키지를 사용하고 있는데 배포가 중단되면 문제가 생기기 때문
- npm ls: 내 프로젝트가 어떤 패키지를 사용하고 있는지 확인
