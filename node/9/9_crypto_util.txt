단방향 암호화(crypto)
- 암호화는 가능하지만 복호화는 불가능
- 암호화: 평문을 암호로 만듬
- 복호화: 암호를 평문으로 해독

- 단방향 암호화의 대표 주자는 해시 기법
- 문자열을 고정된 길이의 다른 문자열로 바꾸는 방식
- 문자열을 해시화 하면 항상 같은 해시가 된다.
- 기존의 문자열은 전혀 알 수가 없다. (해시값을 문자열로 돌릴 수 없음) 매우 안전하다.


Hash 사용하기(sha512)
- createHash(알고리즘): 사용할 해시 알고리즘을 넣어준다.
- md5, sha2, sha256, sha512 등이 가능하지만, md5와 sha1은 이미 취약점이 발견되어 사용하면 안된다.
- 현재는 sha512 정도로 충분하지만 나중에 취약해지면 더 강화된 알고리즘으로 바꿔야 한다.
- 단방향 암호화는 sha512 추천

- update(문자열): 변환할 문자열을 넣어준다.

- digest(인코딩): 인코딩할 알고리즘을 넣어준다.
- base64, hex, latin1이 주로 사용되는데, 그중 base64가 결과 문자열이 가장 짧아 애요된다.
- 결과물로 변환된 문자열을 반환한다.


pbkdf2
- 비밀번호 해시와 하는 알고리즘
- 컴퓨터의 발달로 기존 암호화 알고리즘이 위협받고 있음
- sha512가 취약해지면 sha3 으로 넘어가야 함
- 현재는 pbkdf2나, bcrypt, scrpyt 알고리즘으로 비밀번호를 암호화
- Node는 pbkdf2와 scrypt 지원
- crypto.randomBytes로 64바이트 문자열 생성 -> salt 역할
- pbkdf2 인수로 순서대로 salt, 반복 횟수, 출력 바이트, 알고리즘
- 반복 횟수를 조정해 암호화하는데 1초 정도 걸리게 맞추는 것이 권장됨


양방향 암호화
- 대칭형 암호화(암호문 복호화 가능)
- Key가 사용됨
- 암호화할 때와 복호화 할 때 같은 key를 사용해야 함
- 같은 키를 사용하면 비교적 취약하다.
- 키가 훔쳐질 가능성이 많아 키 관리를 잘 해야한다.
- 프론트/서버 관계에서는 사용할 수 없다. 프론트에서 모두 노출되기 때문에.
- 코드가 복잡한 편이다.
- 기본 노드의 crypto 보다 crypto.js 라이브러리를 사용하는 것을 추천
- 대칭형 암호화는 aes 방식 추천
- 비대칭 암호화는 rsa 방식 추천
- 현업에서 키(비밀번호) 관리하는 것은 어렵다.
- aws kms(key management service) 사용하는 경우도 많다.


util
- 각종 편의 기능을 모아둔 모듈
- deprecated와 promisify가 자주 쓰임

- 기존에 쓰고 있던 코드가 잘못된 것을 발견했는데, 기존 프로그램에 영향을 주기 때문에 바꾸거나 삭제하면 안된다.
- 이럴 때 사용하지 말라는 의미로 deprecated 를 사용한다.
- deprecated로 감싼 함수를 사용할 때마다 경고가 뜬다.
- 첫 번째 인자로 넣은 함수를 사용했을 때 경고 메세지가 출력된다.
- 두 번째 인자로 경고 메세지 내용을 넣으면 된다.

- promisify 는 콜백함수를 promise처럼 사용하기 위해 사용한다.
- 바꿀 함수를 인자로 제공한다. 이렇게 바꾸면 async/await 패턴까지 사용할 수 있다.
- 단, 콜백이 (error, data) 형식이어야 한다.
